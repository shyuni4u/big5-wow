{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Checkbox from '../atoms/Checkbox';\n/**\r\n  * 1-6번, 10-12번의 경우 전혀 아니다를 1로 시작해서 매우 그렇다를 5로 두고,\r\n  * 7-9번은 전혀 아니다 5로 시작해서 매우 그렇다를 1로 두고 계산합니다.\r\n  * 각 성격타입은 다음과 같으며, 해당 문항을 더한 것이 자신의 점수입니다.\r\n  * 외향성 1+6\r\n  * 신경성 5+10\r\n  * 성실성 4+9\r\n  * 친화성 2+7+12\r\n  * 개방성 3+8+11\r\n*/\n\nconst testList = [{\n  question: '모르는 사람에게 먼저 말을 건다',\n  type: 'extraversion'\n}, {\n  question: '다른 사람이 편안하고 행복한지 확인한다',\n  type: 'agreeableness'\n}, {\n  question: '그림, 글, 음악을 창작한다',\n  type: 'openness to experience'\n}, {\n  question: '모든 일을 사전에 준비한다',\n  type: 'conscientiousness'\n}, {\n  question: '울적하거나 우울함을 느낀다',\n  type: 'neuroticism'\n}, {\n  question: '회식, 파티, 사교모임을 계획한다',\n  type: 'extraversion'\n}, {\n  question: '사람들을 모욕한다',\n  type: 'agreeableness',\n  reverse: true\n}, {\n  question: '철학적이거나 영적인 문제들을 생각한다',\n  type: 'openness to experience',\n  reverse: true\n}, {\n  question: '일이나 물건을 정리하지 않고 어지럽게 그냥 둔다',\n  type: 'conscientiousness',\n  reverse: true\n}, {\n  question: '스트레스나 걱정을 느낀다',\n  type: 'neuroticism'\n}, {\n  question: '어려운 단어를 사용한다',\n  type: 'openness to experience'\n}, {\n  question: '타인의 감정에 공감한다',\n  type: 'agreeableness'\n}];\nconst strValues = ['전혀 아니다', '별로 아니다', '보통이다', '약간 그렇다', '매우 그렇다']; // type TestItem = typeof testList\n\nexport const Test = () => {\n  const {\n    0: processIndex,\n    1: setProcessIndex\n  } = useState(0);\n  const {\n    0: valueList,\n    1: setValueList\n  } = useState([]);\n  const MAX_SCORE = 5;\n  useEffect(() => {\n    setValueList(testList.map(() => -1));\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"p\", null, \"Big5 TEST\"), __jsx(\"main\", null, testList.map((item, index) => __jsx(\"div\", {\n    key: index,\n    style: {\n      display: index === processIndex ? 'inherit' : 'none'\n    }\n  }, __jsx(\"div\", null, item.question), __jsx(\"div\", null, strValues.map((subItem, subIndex) => __jsx(Checkbox, {\n    key: subIndex,\n    radio: true,\n    label: subItem,\n    checked: valueList[index] === (item.reverse ? MAX_SCORE - subIndex : subIndex + 1),\n    onChange: () => {\n      const tmp = [...valueList];\n      tmp[index] = item.reverse ? MAX_SCORE - subIndex : subIndex + 1;\n      setValueList(tmp);\n    }\n  })))))), __jsx(\"div\", null, __jsx(\"button\", {\n    type: \"button\",\n    disabled: processIndex === 0,\n    onClick: () => {\n      const tmp = [...valueList];\n      tmp[processIndex] = -1;\n      setValueList(tmp);\n      setProcessIndex(prev => prev - 1);\n    }\n  }, \"\\uC774\\uC804\"), processIndex + 1, \" / \", testList.length, __jsx(\"button\", {\n    type: \"button\",\n    disabled: valueList[processIndex] === -1,\n    onClick: () => processIndex + 1 === testList.length ? alert('결과창 이동') : setProcessIndex(prev => prev + 1)\n  }, processIndex + 1 === testList.length ? '결과보기' : '다음')), __jsx(\"div\", null, valueList.join(', ')));\n};\nexport default Test;","map":null,"metadata":{},"sourceType":"module"}